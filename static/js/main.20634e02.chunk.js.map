{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/AddText/index.js","App.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","onClick","select","id","alt","name","src","image","Wrapper","children","Title","AddText","chosen","hiscore","App","state","cards","includes","_this","setState","push","length","_this2","this","shuffledCards","array","i","j","Math","floor","random","temp","shuffleArray","components_Wrapper","components_Title","components_AddText","map","friend","components_FriendCard","key","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"2iTAgBeA,MAbf,SAAoBC,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,QAAME,QAAS,kBAAML,EAAMM,OAAON,EAAMO,MACvCN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEbH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,kBCF1BC,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,iBCG1BC,MAJf,SAAed,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMa,iBCGvBE,MAJf,SAAiBf,GACf,OAAOC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWJ,EAAMa,kBCGnCG,EAAS,GACTC,EAAU,MA2DCC,6MA3CbC,MAAQ,CACNC,WAIAd,OAAS,SAAAC,GAEHS,EAAOK,SAASd,IACpBS,EAAS,GACTM,EAAKC,SAAS,CAAEH,YAIhBJ,EAAOQ,KAAKjB,GACRS,EAAOS,OAASR,IACpBA,EAAUD,EAAOS,QAEjBH,EAAKC,SAAS,CAAEH,oFAMX,IAAAM,EAAAC,KACDC,EArCV,SAAsBC,GAEpB,IAAK,IAAIC,EAAKD,EAAMJ,OAAS,EAAIK,EAAI,EAAGA,IAAK,CAC3C,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCK,EAAON,EAAMC,GACnBD,EAAMC,GAAKD,EAAME,GACjBF,EAAME,GAAKI,EAEb,OAAON,EA6BiBO,CAAaT,KAAKR,MAAMC,OAC9C,OACEnB,EAAAC,EAAAC,cAACkC,EAAD,KACEpC,EAAAC,EAAAC,cAACmC,EAAD,+CACArC,EAAAC,EAAAC,cAACoC,EAAD,qDAAuDvB,EAAOS,OAA9D,uBAA0FR,GAEzFW,EAAcY,IAAI,SAAAC,GAAM,OACvBxC,EAAAC,EAAAC,cAACuC,EAAD,CACEpC,OAAQoB,EAAKpB,OACbC,GAAIkC,EAAOlC,GACXoC,IAAKF,EAAOlC,GACZI,MAAO8B,EAAO9B,kBArCRiC,mBCjBlBC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.20634e02.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\">\n     <span onClick={() => props.select(props.id)} >\n      <div className=\"img-container\">\n\n        <img alt={props.name} src={props.image} />\n      </div>\n      </span>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction AddText(props) {\n  return <p className=\"addtext\">{props.children}</p>;\n}\n\nexport default AddText;","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport AddText from \"./components/AddText\";\nimport cards from \"./cards.json\";\n\nvar chosen = [];\nvar hiscore = 0;\n\n// function to shuffle the card order in a new array of ids\nfunction shuffleArray(array) {\n  // let i = array.length - 1;\n  for (let i = (array.length - 1); i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\nclass App extends Component {\n  // Setting this.state.cards to the cards json array\n  state = {\n    cards\n  };\n\n    // a select method to determine what happens when a card is clicked\n    select = id => {\n      // if the id chosen has already been chosen, reset the chosen array and reshuffle\n      if (chosen.includes(id)) {\n      chosen = [];\n      this.setState({ cards });\n      // if the id hasn't been chosen, push the id to the 'chosen' array, set the new high\n      // score to be equal to the length of the array (current score), and reshuffle\n      } else {\n      chosen.push(id);\n      if (chosen.length > hiscore) {\n      hiscore = chosen.length;\n      };\n      this.setState({ cards });\n  };\n}\n\n\n  // Map over this.state.cards and render a FriendCard component for each friend object\n  render() {\n    const shuffledCards = shuffleArray(this.state.cards);\n    return (\n      <Wrapper>\n        <Title>Clicky Game for Android: Netrunner IDs</Title>\n        <AddText>Click each ID card only once!         Score: {chosen.length}        High Score: {hiscore}</AddText>\n\n        {shuffledCards.map(friend => (  \n          <FriendCard\n            select={this.select}\n            id={friend.id}\n            key={friend.id}\n            image={friend.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}